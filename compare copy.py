from src.args import arguments
from src import compareAlgorithms
import time
from src import terminalActions
import threading
import sys
import json

argValues = arguments.argsFunc()
algorithms = compareAlgorithms
TerminalActions = terminalActions

breakpoint = False
finishGetFiles = False
failGetFiles = False
finishCompareFiles = False
failCompareFiles = False
finishOutput = False
failOutput = False
filesDir1 = []
filesDir2 = []
listFiles = []
result = []
pathError = False
connectError = False

def threadGetFiles():
    time.sleep(0.5)
    def message():
        # K·∫øt th√∫c animation
        global breakpoint
        while not getfile_completed.is_set() and breakpoint:
            time.sleep(2)
            if finishGetFiles:  # Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa h√†m getfile
                time.sleep(1)
                print("\nDuy·ªát files th√†nh c√¥ng! ‚úÖ ")
                breakpoint = False
                # return listFiles
            elif failGetFiles: 
                print("\nDuy·ªát files th·∫•t b·∫°i! ‚ùåüò®üò®")
                breakpoint = False

    def getFiles2Folder():
        global finishGetFiles
        global failGetFiles
        global listFiles
        global filesDir1
        global filesDir2
        global breakpoint
        global pathError
        global connectError
        try:
            print('\n[+] ƒêang duy·ªát files...')
            if not algorithms.checkPath(argValues[1], argValues[2]):
                breakpoint = True
                pathError = True
                print('\n‚ùåüò®üò® ERROR: ƒê∆∞·ªùng d·∫´n 2 kh√¥ng ƒë√∫ng v·ªõi m√£ ph√°t h√†nh m·ªõi. Vui l√≤ng ki·ªÉm tra l·∫°i!')
                sys.exit()
            algorithms.connectSMB(argValues[4])
            if not argValues[0]:
                print('[+] Duy·ªát files tr√™n th∆∞ m·ª•c 1')
                filesDir1 = [['', '', '', 0, '', '']]
                listFiles.append(filesDir1)
                print('\n--- Duy·ªát th∆∞ m·ª•c 1 th√†nh c√¥ng! ‚úÖ')
            else:
                print('\n[+] Duy·ªát files tr√™n th∆∞ m·ª•c 1...')
                filesDir1 = algorithms.getSMBFiles(argValues[0])
                listFiles.append(filesDir1)
                print('\n--- Duy·ªát th∆∞ m·ª•c 1 th√†nh c√¥ng! ‚úÖ')
            time.sleep(0.5)
            print('\n[+] Duy·ªát files tr√™n th∆∞ m·ª•c 2...')
            filesDir2 = algorithms.getSMBFiles(argValues[1])
            print('\n--- Duy·ªát th∆∞ m·ª•c 2 th√†nh c√¥ng! ‚úÖ')
            # print(filesDir1)
            listFiles.append(filesDir2)
            finishGetFiles = True
        
        except FileNotFoundError as e1:
            breakpoint = True
            connectError = True
            print('\n‚ùåüò®üò® ERROR: Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh SMB. Vui l√≤ng ki·ªÉm tra l·∫°i!')
            sys.exit()
        except json.decoder.JSONDecodeError as e2:
            breakpoint = True
            connectError = True
            print(f"\n‚ùåüò®üò® ERROR: Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file c·∫•u h√¨nh b·ªã l·ªói. Vui l√≤ng ki·ªÉm tra l·∫°i file!")
            sys.exit()
        except Exception as e3:
            failGetFiles = True
            breakpoint = True
            print(f"\n‚ùåüò®üò® ERROR: {e3}")
            # return False

    getfile_completed = threading.Event()
    getfile_thread = threading.Thread(target=getFiles2Folder)
    message_thread = threading.Thread(target=message)
    
    # B·∫Øt ƒë·∫ßu ch·∫°y c·∫£ hai lu·ªìng
    getfile_thread.start()
    message_thread.start()

    # ƒê·ª£i cho ƒë·∫øn khi h√†m getfile ho√†n th√†nh
    getfile_thread.join()
    time.sleep(0.5)
    # ƒê√°nh d·∫•u r·∫±ng h√†m getfile ƒë√£ ho√†n th√†nh
    getfile_completed.set()
    # ƒê·ª£i cho ƒë·∫øn khi lu·ªìng animation c≈©ng ho√†n th√†nh
    message_thread.join()

def threadCompare():
    time.sleep(1)

    def message():
        # K·∫øt th√∫c animation
        point = True
        while not compare_completed.is_set() and point == True:
            if finishCompareFiles == True:  # Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa h√†m getfile
                time.sleep(1)
                print("\n--- So s√°nh files th√†nh c√¥ng! ‚úÖ ")
                point = False
                # return listFiles
            elif failCompareFiles == True: 
                print("\n--- So s√°nh files th·∫•t b·∫°i! ‚ùåüò®üò®")
                point = False

    def compare():
        time.sleep(0.5)
        print('\n[+] ƒêang so s√°nh files...')
        global finishCompareFiles
        global failCompareFiles
        global result
        global listFiles
        try:
            compareResult = algorithms.compareList(listFiles[0], listFiles[1])
            result.append(listFiles[0])
            result.append(listFiles[1])
            result.append(compareResult)
            finishCompareFiles = True
        except Exception as e:
            failCompareFiles = True
            print(f"\nError: {e}")
            return False

    compare_completed = threading.Event()
    compare_thread = threading.Thread(target=compare)
    message_thread = threading.Thread(target=message)
    
    # B·∫Øt ƒë·∫ßu ch·∫°y c·∫£ hai lu·ªìng
    compare_thread.start()
    message_thread.start()

    # ƒê·ª£i cho ƒë·∫øn khi h√†m compare ho√†n th√†nh
    compare_thread.join()
    time.sleep(0.5)

    # ƒê√°nh d·∫•u r·∫±ng h√†m compare ƒë√£ ho√†n th√†nh
    compare_completed.set()

    # ƒê·ª£i cho ƒë·∫øn khi lu·ªìng animation c≈©ng ho√†n th√†nh
    message_thread.join()

def threadFinal():
    global breakpoint

    time.sleep(1)
    def message():
        # K·∫øt th√∫c animation
        point = True
        while not output_completed.is_set() and point == True:
            if finishOutput == True:  # Ki·ªÉm tra k·∫øt qu·∫£ c·ªßa h√†m getfile
                time.sleep(1)
                print("\n--- Xu·∫•t file k·∫øt qu·∫£ th√†nh c√¥ng! ‚úÖ ")
                point = False
                # return listFiles
            elif failOutput == True: 
                print("\n--- Xu·∫•t file k·∫øt qu·∫£ th·∫•t b·∫°i! ‚ùåüò®üò®")
                point = False

    def output():
        time.sleep(0.5)
        print('\n[+] ƒêang xu·∫•t k·∫øt qu·∫£...')
        global finishOutput
        global failOutput
        global result
        try:
            algorithms.writeToExcelFile(result[0], result[1], result[2], argValues[0], argValues[1], argValues[2], argValues[3])
            finishOutput = True
            # TerminalActions.createTable(result[2])
        except Exception as e:
            failOutput = True
            print(f"\nError: {e}")
            return False
        
    output_completed = threading.Event()
    output_thread = threading.Thread(target=output)
    message_thread = threading.Thread(target=message)
    
    # B·∫Øt ƒë·∫ßu ch·∫°y c·∫£ hai lu·ªìng
    output_thread.start()
    message_thread.start()

    # ƒê·ª£i cho ƒë·∫øn khi h√†m output ho√†n th√†nh
    output_thread.join()
    time.sleep(0.5)

    # ƒê√°nh d·∫•u r·∫±ng h√†m output ƒë√£ ho√†n th√†nh
    output_completed.set()

    # ƒê·ª£i cho ƒë·∫øn khi lu·ªìng animation c≈©ng ho√†n th√†nh
    message_thread.join()

if __name__ == "__main__":
    print('''

    
 ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì‚ñà‚ñà‚ñà   ‚ñÑ‚ñÑ‚ñÑ       ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñà  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñì    ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 
‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí‚ñÄ‚ñà‚ñÄ ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ    ‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñà‚ñí‚ñì‚ñà   ‚ñÄ    ‚ñì‚ñà‚ñà   ‚ñí‚ñì‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñí    ‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà    ‚ñí 
‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà    ‚ñì‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñë ‚ñà‚ñà‚ñì‚ñí‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ  ‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà ‚ñí‚ñí‚ñà‚ñà‚ñà      ‚ñí‚ñà‚ñà‚ñà‚ñà ‚ñë‚ñí‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñà‚ñà‚ñà   ‚ñë ‚ñì‚ñà‚ñà‚ñÑ   
‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà    ‚ñí‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñÑ‚ñà‚ñì‚ñí ‚ñí‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà ‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ  ‚ñí‚ñì‚ñà  ‚ñÑ    ‚ñë‚ñì‚ñà‚ñí  ‚ñë‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë    ‚ñí‚ñì‚ñà  ‚ñÑ   ‚ñí   ‚ñà‚ñà‚ñí
‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë‚ñí‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí ‚ñë  ‚ñë ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí   ‚ñë‚ñí‚ñà‚ñë   ‚ñë‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí
‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë ‚ñë ‚ñí‚ñë   ‚ñë  ‚ñë‚ñí‚ñì‚ñí‚ñë ‚ñë  ‚ñë ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñì‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë    ‚ñí ‚ñë   ‚ñë‚ñì  ‚ñë ‚ñí‚ñë‚ñì  ‚ñë‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñí ‚ñí‚ñì‚ñí ‚ñí ‚ñë
  ‚ñë  ‚ñí     ‚ñë ‚ñí ‚ñí‚ñë ‚ñë  ‚ñë      ‚ñë‚ñë‚ñí ‚ñë       ‚ñí   ‚ñí‚ñí ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí‚ñë ‚ñë ‚ñë  ‚ñë    ‚ñë      ‚ñí ‚ñë‚ñë ‚ñë ‚ñí  ‚ñë ‚ñë ‚ñë  ‚ñë‚ñë ‚ñë‚ñí  ‚ñë ‚ñë
‚ñë        ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñë      ‚ñë   ‚ñë‚ñë         ‚ñë   ‚ñí     ‚ñë‚ñë   ‚ñë    ‚ñë       ‚ñë ‚ñë    ‚ñí ‚ñë  ‚ñë ‚ñë      ‚ñë   ‚ñë  ‚ñë  ‚ñë  
‚ñë ‚ñë          ‚ñë ‚ñë         ‚ñë                  ‚ñë  ‚ñë   ‚ñë        ‚ñë  ‚ñë           ‚ñë      ‚ñë  ‚ñë   ‚ñë  ‚ñë      ‚ñë  
‚ñë                                                                                                                                                                                                                         
    ''')
    start = time.time()
    threadGetFiles()
    end = time.time()
    if breakpoint == False:
        threadCompare()
        threadFinal()
        time.sleep(1)
        print('K·∫øt th√∫c!!!')
        print("T·ªïng th·ªùi gian ch·∫°y: " + str(end - start))
    else:
        print("T·ªïng th·ªùi gian ch·∫°y: " + str(end - start))
